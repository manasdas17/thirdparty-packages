#########################################################################
# ds.db -- VSIPL++ datasheet description.
#
# Describes how to generate a "datasheet" from characterization data.
#
# FORMAT
#
#    Entries in the datasheet are generated by for each "set" entry in
#    this file, in the order they are encountered.
#
#    A "set" entry has the following format:
#
#       set: <set name: conv-2-1>
#          text: <textual description: conv>
#          sizes: <list of sizes: 1024 4096>
#          metric: <list of metrics: mflop_s>
#
#    The <set name> should correspond to a characterization run in
#    the char.db file.  The <sizes> should correspond to sizes within
#    that characterization run.
#
#    Lists may be comma or space separated.
#
#    The following metrics are available:
#       - mflop_s - MF/s (default)
#       - t_mb_s  - Total MB/s
#       - r_mb_s  - Read MB/s
#       - mpts_s  - MPoint/s
#
# EXAMPLE
#
#   To characterize convolution,
#
#   First, it needs to be characterized in char.db:
#
#      set: conv
#        pgm:       conv
#        cases:     2
#        extra:     -stop 14
#
#   This generates a conv-2-1 .dat file, which can be referenced in
#   ds.db like so:
#
#      set: conv-2-1
#         text:  conv
#         sizes: 1024 4096
#         metric: mflop_s t_mb_s
#
#   This results in the following datasheet entry:
#
#      conv  (conv-2-1)
#         Size  us/call    us/pt   MFLOP/s      MB/s
#         1024      0.9  0.00087  17143.21   9143.04
#         4096      3.2  0.00078  19135.52  10205.61
#########################################################################



#########################################################################
# Convolution
#########################################################################

section: Convolution

set: conv-3-1
  text:  conv 1D min-support, K=16, float
  sizes: 4096 32768 1048576

set: conv-6-1
  text:  conv 1D min-support, K=16, complex
  sizes: 4096 32768 1048576

set: conv2d-3x3-3-1
  text:  conv 2D min-support, K=3x3, 256 rows
  sizes: 256 1024

set: conv2d-5x5-3-1
  text:  conv 2D min-support, K=5x5, 256 rows
  sizes: 256 1024



#########################################################################
# Correlation
#########################################################################

section: Correlation

set: corr-3-1
  text:  corr 1D min-support, baised, K=16, float
  sizes: 4096 32768 1048576

set: corr-6-1
  text:  corr 1D min-support, unbaised, K=16, float
  sizes: 4096 32768 1048576

set: corr-9-1
  text:  corr 1D min-support, baised, K=16, complex-float
  sizes: 4096 32768 1048576

set: corr-12-1
  text:  corr 1D min-support, unbaised, K=16, complex-float
  sizes: 4096 32768 1048576


#########################################################################
# Copy
#########################################################################

section: Copy

set: copy-1-1
  text:  copy: VSIPL++ vector copy, float (A = B)
  metric: r_mb_s
  sizes: 4096 32768 1048576

set: copy-5-1
  text:  copy: vendor memcpy, float
  metric: r_mb_s
  sizes: 4096 32768 1048576

set: mcopy-1-1
  text:  copy: VSIPL++ matrix copy, float (A = B)
  metric: r_mb_s
  sizes: 256 2048

set: mcopy-4-1
  text:  copy: VSIPL++ matrix copy, complex-float (A = B)
  metric: r_mb_s
  sizes: 256 1024



#########################################################################
# Transpose
#########################################################################

section: Transpose

set: mcopy-2-1
  text:   transpose, row-maj = col-maj, float (A = B)
  metric: r_mb_s
  sizes:  256 2048

set: mcopy-6-1
  text:   transpose, row-maj = col-maj, complexs-float (A = B)
  metric: r_mb_s
  sizes:  256 1024


#########################################################################
# Reductions
#########################################################################

section: Reductions

set: maxval-1-1
  text: maxval: vector max (z = maxval(A, idx)) (float)
  metric: mpts_s

# Sumval
set: sumval-1-1
  text: sumval: vector sum (z = sumval(A)) (float)



#########################################################################
# FFTs
#########################################################################

section: FFT

set: fft-1-1
  text:  fft: Out-of-place CC Fwd FFT (split complex)
  sizes: 4096

set: fft-11-1
  text:  fft: Out-of-place CC Fwd FFT (fft(A, Z))
  sizes: 4096

set: fft-12-1
  text:  fft: In-place CC Fwd FFT (fft(AZ))
  sizes: 4096

set: fft-13-1
  text:  fft: By-value CC Fwd FFT (Z = fft(A))
  sizes: 4096

set: fft-15-1
  text:  fft: Out-of-place CC Inv FFT (fft(A, Z))
  sizes: 4096

set: fft-16-1
  text:  fft: In-place CC Inv FFT (fft(AZ))
  sizes: 4096

set: fft-17-1
  text:  fft: By-value CC Inv FFT (Z = fft(A))
  sizes: 4096

set: fft-21-1
  text:  fft: Out-of-place CC Fwd FFT (Z = fft(A)) (patient)
  sizes: 4096

section: CVSIP-FFT

set: cvsip-fft-1-1
  text:  cvsip-fft: Out-of-place CC Fwd FFT (split complex)
  sizes: 4096

set: cvsip-fft-11-1
  text:  cvsip-fft: Out-of-place CC Fwd FFT (fft(A, Z))
  sizes: 4096

set: cvsip-fft-12-1
  text:  cvsip-fft: In-place CC Fwd FFT (fft(AZ))
  sizes: 4096

set: cvsip-fft-13-1
  text:  cvsip-fft: By-value CC Fwd FFT (Z = fft(A))
  sizes: 4096

set: cvsip-fft-15-1
  text:  cvsip-fft: Out-of-place CC Inv FFT (fft(A, Z))
  sizes: 4096

set: cvsip-fft-16-1
  text:  cvsip-fft: In-place CC Inv FFT (fft(AZ))
  sizes: 4096

set: cvsip-fft-17-1
  text:  cvsip-fft: By-value CC Inv FFT (Z = fft(A))
  sizes: 4096

set: cvsip-fft-21-1
  text:  cvsip-fft: Out-of-place CC Fwd FFT (Z = fft(A)) (patient)
  sizes: 4096

section: Vendor FFT

set: ipp-fft-1-1
  text:  fft (vendor-IPP): Out-of-place CC Fwd FFT (inter complex)
  sizes: 4096
  optional: 1

set: fftw3-fft-11-1
  text:  fft (vendor-fftw3): Out-of-place CC Fwd FFT (inter complex)
  sizes: 4096
  optional: 1

set: fftw3-fft-12-1
  text:  fft (vendor-fftw3): In-place CC Fwd FFT (inter complex)
  sizes: 4096
  optional: 1

set: fftw3-fft-51-1
  text:  fft (vendor-fftw3): Out-of-place CC Fwd FFT (split complex)
  sizes: 4096
  optional: 1

#set: fftw3-fft-51-1
#  text:  fft (vendor-fftw3): In-place CC Fwd FFT (split complex)
#  sizes: 4096
#  optional: 1

set: fftw3-fft-101-1
  text:  fft (vendor-fftw3): -101
  sizes: 4096
  optional: 1

set: fftw3-fft-111-1
  text:  fft (vendor-fftw3): -111
  sizes: 4096
  optional: 1

set: sal-fft-1-1
  text:  fft (vendor-SAL): Out-of-place CC Fwd FFT (split complex)
  sizes: 4096
  optional: 1

set: sal-fft-2-1
  text:  fft (vendor-SAL): In-place CC Fwd FFT (split complex)
  sizes: 4096
  optional: 1

set: sal-fft-5-1
  text:  fft (vendor-SAL): Out-of-place CC Inv FFT (split complex)
  sizes: 4096
  optional: 1

set: sal-fft-6-1
  text:  fft (vendor-SAL): In-place CC Inv FFT (split complex)
  sizes: 4096
  optional: 1

set: sal-fft-11-1
  text:  fft (vendor-SAL): Out-of-place CC Fwd FFT (inter complex)
  sizes: 4096
  optional: 1

set: sal-fft-12-1
  text:  fft (vendor-SAL): In-place CC Fwd FFT (inter complex)
  sizes: 4096
  optional: 1

set: sal-fft-15-1
  text:  fft (vendor-SAL): Out-of-place CC Inv FFT (inter complex)
  sizes: 4096
  optional: 1

set: sal-fft-16-1
  text:  fft (vendor-SAL): In-place CC Inv FFT (inter complex)
  sizes: 4096
  optional: 1

section: FFTM

set: fftm-1024r-1-1
  text:  fftm: out-of-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftm-1024r-2-1
  text:  fftm: in-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftm-1024r-11-1
  text:  fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftm-4096c-11-1
  text:  fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftm-11-1-8
  text:  fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A)) (8 SPEs)
  sizes: 1024 4096

section: CVSIP-FFTM

set: cvsip-fftm-1024r-1-1
  text:  cvsip-fftm: out-of-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: cvsip-fftm-1024r-2-1
  text:  cvsip-fftm: in-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: cvsip-fftm-1024r-11-1
  text:  cvsip-fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: cvsip-fftm-4096c-11-1
  text:  cvsip-fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: cvsip-fftm-11-1-8
  text:  cvsip-fftm: out-of-place CC fwd fft, 1024 rows (Z = fftm(A)) (8 SPEs)
  sizes: 1024 4096


section: FFTW3-FFTM

set: fftw3-fftm-1-1
  text:  fftw3-fftm: out-of-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftw3-fftm-101-1
  text:  fftw3-fftm: in-place CC Fwd FFT, 1024 rows (Z = fftm(A))
  sizes: 1024 4096

set: fftw3-fftm-111-1
  text:  fftw3-fftm: -111 (Z = fftm(A))
  sizes: 1024 4096


#########################################################################
# Elementwise
#########################################################################

section: Elementwise VMA

set: vma-1-1
  text: vma: vector fused multiply-add (Z = A * B + C) (float)

set: vma-2-1
  text: vma: vector fused multiply-add (Z = a * B + C) (float)

set: vma-3-1
  text: vma: vector fused multiply-add (Z = a * B + c) (float) (aka saxpy)

set: vma-11-1
  text: vma: vector fused multiply-add (Z = A * B + C) (complex-float)

set: vma-12-1
  text: vma: vector fused multiply-add (Z = a * B + C) (complex)

set: vma-13-1
  text: vma: vector fused multiply-add (Z = a * B + c) (complex) (aka caxpy)



section: Elementwise vmin

set: vmin-1-1
  text: vmin: vector minima (Z = min(A, B)) (float)



section: Elementwise vmul

set: vmul-1-1
  text: vmul: vector multiply (Z = A * B) (float)
  metric: mflop_s t_mb_s
  sizes: 1024 4096 8192 32768 1048576

set: vmul-2-1
  text: vmul: vector multiply (Z = A * B) (complex-float)
  metric: mflop_s t_mb_s
  sizes: 1024 4096 8192 32768 1048576

set: cvsip-vmul-2-1
  text: cvsip-vmul: vector multiply (Z = A * B) (complex-float)
  metric: mflop_s t_mb_s
  sizes: 1024 4096 8192 32768 1048576

set: vmul-31-1
  text: vmul: vector multiply IP (Z *= A) (float)

set: svmul-1-1
  text: svmul: scalar-vector multiply (Z = a * B) (float)

set: sal-vmul-11-1
  text: vmul (vendor-SAL): scalar-vector multiply (Z = a * B) (float)
  optional: 1

set: sal-vmul-31-1
  text: vmul (vendor-SAL): vector multiply IP (Z *= A) (float)
  optional: 1



section: Elementwise vthresh

set: vthresh-1-1
  text: vthresh: vector threshold (Z = ite(A >= b, A, b)) (float) vthr

set: vthresh-2-1
  text: vthresh: vector threshold (Z = ite(A >= b, A, 0)) (float) vthres

set: vthresh-3-1
  text: vthresh: vector threshold (Z = ite(A >= b, A, c)) (float)

set: vthresh-5-1
  text: vthresh: vector threshold (Z = ite(A >= b, 1, 0)) (float)

set: vthresh-11-1
  text: vthresh: vector threshold (Z = ite(A > B, 1, 0)) (float) lvgt

set: vgt_ite-1-1
  text: vthresh: vector threshold (Z = ite(A > B, A, 0)) (float) single-expr

set: vgt_ite-2-1
  text: vthresh: vector threshold (Z = ite(A > B, A, 1)) (float)

set: vgt_ite-5-1
  text: vthresh: vector threshold (Z = ite(A > B, A, 0)) (float) multi-expr

set: sal-vthresh-1-1
  text: vthresh (vendor-SAL): vthreshx (Z = ite(A >= b, A, 0)) (float)
  optional: 1

set: sal-vthresh-2-1
  text: vthresh (vendor-SAL): vthrx (Z = ite(A >= b, A, b)) (float)
  optional: 1

set: sal-lvgt-1-1
  text: vthresh (vendor-SAL): lvgtx (Z = ite(A > B, 1, 0)) (float)
  optional: 1

set: sal-lvgt-2-1
  text: vthresh (vendor-SAL): lvgtx/vmul (Z = ite(A > B, A, 0)) (float)
  optional: 1



section: Elementwise vsmss

set: vsmss-1-1
  text: vsmss: fused expr (Z = A - b*(B-C-D)) (float)

set: vsmss-11-1
  text: vsmss: multiple exprs (Z = A - b*(B-C-D)) (float)



#########################################################################
# FIR
#########################################################################

section: FIR

set: fir-1-1
  text: FIR: float, K=16, D=1, no state-save
  sizes: 1024 2048 4096

set: fir-2-1
  text: FIR: complex, K=16, D=1, no state-save
  sizes: 1024 2048 4096

set: fir-11-1
  text: FIR: float, K=16, D=1, state-save
  sizes: 1024 2048 4096

set: fir-12-1
  text: FIR: complex, K=16, D=1, state-save
  sizes: 1024 2048 4096

section: CVSIP-FIR

set: cvsip-fir-1-1
  text: cvsip-FIR: float, K=16, D=1, no state-save
  sizes: 1024 2048 4096

set: cvsip-fir-2-1
  text: cvsip-FIR: complex, K=16, D=1, no state-save
  sizes: 1024 2048 4096

set: cvsip-fir-11-1
  text: cvsip-FIR: float, K=16, D=1, state-save
  sizes: 1024 2048 4096

set: cvsip-fir-12-1
  text: cvsip-FIR: complex, K=16, D=1, state-save
  sizes: 1024 2048 4096



#########################################################################
# Prod
#########################################################################

section: Matrix-Matrix Product

set: prod-1-1
  text: Matrix product: float (Z = prod(A, B))
  sizes: 256 1024 4096

set: prod-2-1
  text: Matrix product: complex (Z = prod(A, B))
  sizes: 256 1024 4096

set: prod-11-1
  text: Matrix transpose product: float (Z = prodt(A, B))
  sizes: 256 1024 4096

set: prod-12-1
  text: Matrix transpose product: complex (Z = prodt(A, B))
  sizes: 256 1024 4096

set: prod-13-1
  text: Matrix hermetian product: complex (Z = prodh(A, B))
  sizes: 256 1024 4096



section: Dot Product

set: dot-1-1
  text: Dot product: float (Z = dot(A, B))
  sizes: 256 1024 4096

set: dot-2-1
  text: Dot product: complex-float (Z = dot(A, B))
  sizes: 256 1024 4096



#########################################################################
# QR
#########################################################################

set: qrd-1-1
  text: QR decomposition: complex-float, nosaveq
  sizes: 1024


section: Fast Convolution

set: fastconv-4096r-19-1
  text: Fast-convolution (row-size 4096): complex-float (Z = dot(A, B))
  sizes: 1024

set: vmmul-4096c-11-1
  text: vmmul-4096c-11-1
  sizes: 1024 2048 4096
