########################################################################
#
# File:   GNUmakefile.in
# Author: Jules Bergmann
# Date:   2006-04-25
#
# Contents: Makefile for CLAPACK/F2CLIBS/libF77
#
########################################################################

.SUFFIXES: .c .o

srcdir  = @srcdir@

VPATH   = $(srcdir)

CC	= @CC@
CFLAGS	= @CLAPACK_CFLAGS@
OBJEXT  = @OBJEXT@
AR      = @AR@

# If your system lacks onexit() and you are not using an
# ANSI C compiler, then you should add -DNO_ONEXIT to CFLAGS,
# e.g., by changing the above "CFLAGS =" line to
# CFLAGS = -O -DNO_ONEXIT

# On at least some Sun systems, it is more appropriate to change the
# "CFLAGS =" line to
# CFLAGS = -O -Donexit=on_exit

%.$(OBJEXT): %.c
	$(CC) -c -DSkip_f2c_Undefs $(CFLAGS) $<

# We don't need to include main.o, signal_.o, and s_paus.o when building
# clapack for VSIPL++.  Nor do we need to include $(TIME).
MISC =	F77_aloc.$(OBJEXT) Version.$(OBJEXT) s_rnge.$(OBJEXT) abort_.$(OBJEXT) getarg_.$(OBJEXT) iargc_.$(OBJEXT) \
	getenv_.$(OBJEXT) s_stop.$(OBJEXT) system_.$(OBJEXT) cabs.$(OBJEXT)\
	derf_.$(OBJEXT) derfc_.$(OBJEXT) erf_.$(OBJEXT) erfc_.$(OBJEXT) sig_die.$(OBJEXT) exit_.$(OBJEXT)
POW =	pow_ci.$(OBJEXT) pow_dd.$(OBJEXT) pow_di.$(OBJEXT) pow_hh.$(OBJEXT) pow_ii.$(OBJEXT)  pow_ri.$(OBJEXT) pow_zi.$(OBJEXT) pow_zz.$(OBJEXT)
CX =	c_abs.$(OBJEXT) c_cos.$(OBJEXT) c_div.$(OBJEXT) c_exp.$(OBJEXT) c_log.$(OBJEXT) c_sin.$(OBJEXT) c_sqrt.$(OBJEXT)
DCX =	z_abs.$(OBJEXT) z_cos.$(OBJEXT) z_div.$(OBJEXT) z_exp.$(OBJEXT) z_log.$(OBJEXT) z_sin.$(OBJEXT) z_sqrt.$(OBJEXT)
REAL =	r_abs.$(OBJEXT) r_acos.$(OBJEXT) r_asin.$(OBJEXT) r_atan.$(OBJEXT) r_atn2.$(OBJEXT) r_cnjg.$(OBJEXT) r_cos.$(OBJEXT)\
	r_cosh.$(OBJEXT) r_dim.$(OBJEXT) r_exp.$(OBJEXT) r_imag.$(OBJEXT) r_int.$(OBJEXT)\
	r_lg10.$(OBJEXT) r_log.$(OBJEXT) r_mod.$(OBJEXT) r_nint.$(OBJEXT) r_sign.$(OBJEXT)\
	r_sin.$(OBJEXT) r_sinh.$(OBJEXT) r_sqrt.$(OBJEXT) r_tan.$(OBJEXT) r_tanh.$(OBJEXT)
DBL =	d_abs.$(OBJEXT) d_acos.$(OBJEXT) d_asin.$(OBJEXT) d_atan.$(OBJEXT) d_atn2.$(OBJEXT)\
	d_cnjg.$(OBJEXT) d_cos.$(OBJEXT) d_cosh.$(OBJEXT) d_dim.$(OBJEXT) d_exp.$(OBJEXT)\
	d_imag.$(OBJEXT) d_int.$(OBJEXT) d_lg10.$(OBJEXT) d_log.$(OBJEXT) d_mod.$(OBJEXT)\
	d_nint.$(OBJEXT) d_prod.$(OBJEXT) d_sign.$(OBJEXT) d_sin.$(OBJEXT) d_sinh.$(OBJEXT)\
	d_sqrt.$(OBJEXT) d_tan.$(OBJEXT) d_tanh.$(OBJEXT)
INT =	i_abs.$(OBJEXT) i_dim.$(OBJEXT) i_dnnt.$(OBJEXT) i_indx.$(OBJEXT) i_len.$(OBJEXT) i_mod.$(OBJEXT) i_nint.$(OBJEXT) i_sign.$(OBJEXT)
HALF =	h_abs.$(OBJEXT) h_dim.$(OBJEXT) h_dnnt.$(OBJEXT) h_indx.$(OBJEXT) h_len.$(OBJEXT) h_mod.$(OBJEXT)  h_nint.$(OBJEXT) h_sign.$(OBJEXT)
CMP =	l_ge.$(OBJEXT) l_gt.$(OBJEXT) l_le.$(OBJEXT) l_lt.$(OBJEXT) hl_ge.$(OBJEXT) hl_gt.$(OBJEXT) hl_le.$(OBJEXT) hl_lt.$(OBJEXT)
EFL =	ef1asc_.$(OBJEXT) ef1cmc_.$(OBJEXT)
CHAR =	F77_aloc.$(OBJEXT) s_cat.$(OBJEXT) s_cmp.$(OBJEXT) s_copy.$(OBJEXT)
F90BIT = lbitbits.$(OBJEXT) lbitshft.$(OBJEXT)
QINT =	pow_qq.$(OBJEXT) qbitbits.$(OBJEXT) qbitshft.$(OBJEXT)
TIME =	dtime_.$(OBJEXT) etime_.$(OBJEXT)

all: libF77.a

# You may need to adjust signal1.h suitably for your system...
signal1.h: signal1.h0
	cp signal1.h0 signal1.h

# If you get an error compiling dtime_.c or etime_.c, try adding
# -DUSE_CLOCK to the CFLAGS assignment above; if that does not work,
# omit $(TIME) from the dependency list for libF77.a below.

# For INTEGER*8 support (which requires system-dependent adjustments to
# f2c.h), add $(QINT) to the libf2c.a dependency list below...

libF77.a : $(MISC) $(POW) $(CX) $(DCX) $(REAL) $(DBL) $(INT) \
	$(HALF) $(CMP) $(EFL) $(CHAR) $(F90BIT)
	$(AR) r libF77.a $?
	-ranlib libF77.a

clean:
	rm -f libF77.a *.$(OBJEXT)
