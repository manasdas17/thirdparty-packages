######################################################### -*-Makefile-*-
#
# File:   benchmarks/Makefile
# Author: Jules Bergmann
# Date:   2006-01-19
#
# Contents: Standalone Makefile for VSIPL++ benchmarks
#
# Useful for building benchmarks for an installed library.
#
########################################################################

# EXAMPLES:
#
# To build all of the installed benchmarks with .pc files visible in
# PKG_CONFIG_PATH:
#
#   make
#
# To build only the ones in the top-level directory:
#
#   make benchmarks
#
# To compile the fft benchmark only:
#
#   make fft
#

########################################################################
# Configuration Variables
########################################################################

# Variables in this section can be set by the user on the command line.

# Prefix of installed library.  Set this if the library is installed
# in a non-standard location, or if the .pc files are not stored
# in PKG_CONFIG_PATH.
#
#  make PREFIX=/path/to/library
#
PREFIX   := @prefix@

# Package to use.  For binary packages, this should either be 'vsipl++'
# to use the release version of the library, or 'vsipl++-debug' to
# use the debug version of the library.  For source packages, this
# should most likely be 'vsipl++', unless a suffix was given during
# installation.
PKG      := vsipl++

# Object file extension
OBJEXT   := @OBJEXT@

# Executable file extension
EXEEXT   :=  @EXEEXT@


########################################################################
# Internal Variables
########################################################################

# Variables in this section should not be modified.

# Logic to call pkg-config with PREFIX, if specified.
ifdef PREFIX
   PC    := env PKG_CONFIG_PATH=$(PREFIX)/lib/pkgconfig \
	    pkg-config --define-variable=prefix=$(PREFIX) $(PKG)
else
   PC    := pkg-config $(PKG)
endif


CXX      := $(shell $(PC) --variable=cxx )
CXXFLAGS := $(shell $(PC) --cflags       ) \
	    $(shell $(PC) --variable=cxxflags ) \
	    -I. -I./hpec_kernel -I../tests
LIBS     := $(shell $(PC) --libs         )


sources := $(wildcard *.cpp)
objects := $(patsubst %.cpp, %.$(OBJEXT), $(sources))
exes    := $(patsubst %.cpp, %$(EXEEXT),  $(sources))
headers := $(wildcard *.hpp)

statics := $(patsubst %.cpp, %.static$(EXEEXT),  $(sources))

hpec_sources := $(wildcard hpec_kernel/*.cpp)
hpec_objects := $(patsubst %.cpp, %.$(OBJEXT), $(hpec_sources))
hpec_exes    := $(patsubst %.cpp, %$(EXEEXT),  $(hpec_sources))

hpec_targets := $(hpec_exes)


# Do not automatically build tests requiring packages that 
# may not be available
srcs_lapack := $(wildcard lapack/*.cpp)
srcs_ipp    := $(wildcard ipp/*.cpp) 
srcs_sal    := $(wildcard sal/*.cpp) 
srcs_mpi    := $(wildcard mpi/*.cpp) 

exes_lapack := $(patsubst %.cpp, %$(EXEEXT),  $(srcs_lapack))
exes_ipp    := $(patsubst %.cpp, %$(EXEEXT),  $(srcs_ipp))
exes_sal    := $(patsubst %.cpp, %$(EXEEXT),  $(srcs_sal))
exes_mpi    := $(patsubst %.cpp, %$(EXEEXT),  $(srcs_mpi))

targets     := $(filter-out main$(EXEEXT), $(exes)) 
all_targets := $(targets) $(exes_lapack) $(exes_ipp) $(exes_sal) $(exes_mpi)
all_targets += $(hpec_targets)

########################################################################
# Targets
########################################################################

all: $(all_targets) $(headers)

benchmarks: $(targets) $(headers)

hpec_kernel:  $(hpec_targets) $(headers)

check: $(targets) $(headers)

main.$(OBJEXT): $(headers)

vars:
	@echo "PKG-CFG : " $(PC)
	@echo "CXX     : " $(CXX)
	@echo "CXXFLAGS: " $(CXXFLAGS)
	@echo "LIBS    : " $(LIBS)

clean:
	rm -rf $(targets) $(objects)




########################################################################
# Implicit Rules
########################################################################

$(all_targets): %$(EXEEXT) : %.$(OBJEXT) main.$(OBJEXT)
	$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS) || rm -f $@

$(statics): %.static$(EXEEXT) : %.$(OBJEXT) main.$(OBJEXT)
	$(CXX) -static $(LDFLAGS) -o $@ $^ $(LIBS) || rm -f $@

%.$(OBJEXT): %.cpp
	$(CXX) -c $(CXXFLAGS) -o $@ $< || rm -f $@
